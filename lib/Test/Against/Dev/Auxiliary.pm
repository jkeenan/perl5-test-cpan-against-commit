package Test::Against::Dev::Auxiliary;
use strict;
use 5.10.1;
our $VERSION = '0.09';
use parent 'Exporter';
our @EXPORT_OK = ( qw|
    read_one_psv
    write_master_psv
| );
use Carp;
use Data::Dump ( qw| dd pp | );
use Text::CSV_XS;

=head1 NAME

Test::Against::Dev::Auxiliary - Helper functions for Test::Against::Dev

=head1 SYNOPSIS

    use Test::Against::Dev::Auxiliary (qw|
        read_one_psv
        write_master_psv
    |);

    my $master_data = {};
    my $verbose = 1;
    my $columns = read_one_psv('/path/to/psvfile', $master_data, $verbose);

    my $master_columns_ref = [
      "dist",
      "perl-5.29.0.author",
      "perl-5.29.0.distname",
      "perl-5.29.0.distversion",
      "perl-5.29.0.grade",
      "perl-5.29.1.author",
      "perl-5.29.1.distname",
      "perl-5.29.1.distversion",
      "perl-5.29.1.grade",
      ...
    ];

    write_master_psv($master_data, $master_columns_ref, '/path/to/master_psvfile');

=cut

=head1 DESCRIPTION

This module exports on request only subroutines useful for pre- and post-processing data generated by the F<Test::Against::Dev> and F<Test::Against::Commit> packages included in this CPAN distribution.

=head1 SUBROUTINES

=head2 C<read_one_psv()>

=over 4

=item * Purpose

Create or augment a data structure holding the results of one or more test-against-dev processes.

=item * Arguments

    my $master_data = {};
    my $verbose = 1;
    my $columns = read_one_psv('/path/to/psvfile', $master_data, $verbose);

List of 3 elements:

=over 4

=item 1 Path to .psv file

String holding absolute path to the PSV (C<.psv>) file to be processed.  The
columns in the file must look like this:

      "dist",
      "perl-5.29.0.author",
      "perl-5.29.0.distname",
      "perl-5.29.0.distversion",
      "perl-5.29.0.grade",
      "perl-5.29.1.author",
      "perl-5.29.1.distname",
      "perl-5.29.1.distversion",
      "perl-5.29.1.grade",
      ...

The entries in the C<dist> column will be the names of CPAN distributions being tested in the test-against-dev process.

    dist|perl-5.29.0.author|perl-5.29.0.distname|perl-5.29.0.distversion|perl-5.29.0.grade
    AAAA-Crypt-DH|BINGOS|AAAA-Crypt-DH-0.06|0.06|PASS
    ARGV-Struct|JLMARTIN|ARGV-Struct-0.03|0.03|PASS
    AWS-Signature4|LDS|AWS-Signature4-1.02|1.02|PASS
    Acme-Damn|IBB|Acme-Damn-0.08|0.08|PASS
    ...

=item 2 C<$master_data>

Hash reference.  The first time that the function is called, the hash should
be empty.  Successive calls to the function will populate the hash.

=item 3 C<$verbose>

Provide a Perl-true value to get more information on C<STDOUT>.

=back

=item * Return Value

Array reference holding a list of the columns detected within the PSV file.
The number of columns must be at least 5.

=item * Comment

The subroutine adds data in-place to the structure held in C<$master_data>.

=back

=cut

sub read_one_psv {
    my ($file, $master_data, $verbose) = @_;
    say "Handling $file ..." if $verbose;
    my $psv = Text::CSV_XS->new({ binary => 1, auto_diag => 1, sep_char => '|', eol => $/ });
    open my $IN, "<:encoding(utf8)", $file
        or croak "Unable to open $file for reading";

    my @cols = @{$psv->getline($IN)};
    dd(\@cols) if $verbose;
    my $row = {};
    $psv->bind_columns(\@{$row}{@cols});
    while ($psv->getline($IN)) {
        my $dist = $row->{dist};
        $master_data->{$dist}{$_} = $row->{$_} for keys %{$row};
    }
    close $IN or croak "Unable to close $file after reading";
    return \@cols;
}

=head2 C<write_master_psv()>

=over 4

=item * Purpose

=item * Arguments

    my $master_columns_ref = [
      "dist",
      "perl-5.29.0.author",
      "perl-5.29.0.distname",
      "perl-5.29.0.distversion",
      "perl-5.29.0.grade",
      "perl-5.29.1.author",
      "perl-5.29.1.distname",
      "perl-5.29.1.distversion",
      "perl-5.29.1.grade",
      ...
    ];

    write_master_psv($master_data, $master_columns_ref, '/path/to/master_psvfile');

List of 3 elements:

=over 4

=item 1 C<$master_data>

The hashref originally passed to C<read_one_psv()> and augmented through successive calls to that function.

=item 2 C<$master_columns_ref>

Array reference holding list of column names to be written to master PSV file.

=item 3 Path to master PSV file

String holding absolute path to the new master PSV file to be populated with data now found in C<$master_data>.

=back

=item * Return Value

Returns Perl-true value; dies otherwise.

=item * Comment

Writes the pipe-separated-values file specified in the third argument.

=back

=cut

sub write_master_psv {
    my ($master_data, $columnsref, $master_psv_file) = @_;
    my $psv = Text::CSV_XS->new({ binary => 1, auto_diag => 1, sep_char => '|', eol => $/ });
    open my $OUT, ">:encoding(utf8)", $master_psv_file
        or croak "Unable to open $master_psv_file for writing";
    $psv->print($OUT, $columnsref), "\n" or $psv->error_diag;
    for my $dist (sort keys %{$master_data}) {
        my @modified_data = @{$master_data->{$dist}}{@{$columnsref}};
        ROW: for (my $i = $#modified_data; $i >= 0; $i--) {
            last ROW if length($modified_data[$i]);
            $modified_data[$i] = 'x';
        }
        $psv->print($OUT, [ @modified_data ])
            or $psv->error_diag;
    }
    close $OUT or croak "Unable to close $master_psv_file after writing";
    return 1;
}

1;
